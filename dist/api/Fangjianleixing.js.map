{"version":3,"sources":["../../src/api/Fangjianleixing.js"],"names":["config","db","api","get","req","res","page","parseInt","query","limit","sort","order","where","fangjianleixing","indexOf","Op","like","eq","FangjianleixingModel","findAndCountAll","offset","result","currPage","pageSize","toRes","session","post","Object","keys","body","forEach","item","create","userinfo","jwt","decode","headers","token","update","id","destroy","in","all","findOne","params","record","sql","type","remindstart","columnName","remindend","remindStart","util","getDateTimeFormat","Number","remindEnd","sequelize","plain","raw","QueryTypes","SELECT","results","count","xColumnName","yColumnName","timeStatType","tableName","dbConnection","dbtype","toLowerCase"],"mappings":"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","file":"Fangjianleixing.js","sourcesContent":["import { version } from '../../package.json'\r\nimport { Router } from 'express'\r\nimport { Sequelize, Op, QueryTypes } from 'sequelize'\r\nimport sequelize from '../models/sequelize'\r\nimport toRes from '../lib/toRes'\r\nimport FangjianleixingModel from '../models/FangjianleixingModel'\r\nimport md5 from 'md5-node'\r\nimport util from '../lib/util'\r\nimport jwt from 'jsonwebtoken'\r\nimport moment from 'moment'\r\n\r\n\r\nexport default ({ config, db }) => {\r\n\tlet api = Router()\r\n\r\n\r\n\t// 分页接口（后端）\r\n\tapi.get('/page', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet page = parseInt(req.query.page) || 1\r\n\t\t\tlet limit = parseInt(req.query.limit) || 10\r\n\t\t\tlet sort = req.query.sort || 'id'\r\n\t\t\tlet order = req.query.order || 'asc'\r\n\r\n\t\t\tlet where = {}\r\n\t\t\tlet fangjianleixing = req.query.fangjianleixing\r\n\t\t\tif (fangjianleixing) {\r\n\r\n\t\t\t\tif (fangjianleixing.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.fangjianleixing = {\r\n\t\t\t\t\t\t[Op.like]: fangjianleixing\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.fangjianleixing = {\r\n\t\t\t\t\t\t[Op.eq]: fangjianleixing\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet result = await FangjianleixingModel.findAndCountAll({\r\n\t\t\t\torder: [[sort, order]],\r\n\t\t\t\twhere,\r\n\t\t\t\toffset: (page - 1) * limit,\r\n\t\t\t\tlimit\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tresult.currPage = page\r\n\t\t\tresult.pageSize = limit\r\n\r\n\t\t\ttoRes.page(res, 0, result)\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 分页接口（前端）\r\n\tapi.get('/list', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet page = parseInt(req.query.page) || 1\r\n\t\t\tlet limit = parseInt(req.query.limit) || 10\r\n\t\t\tlet sort = req.query.sort || 'id'\r\n\t\t\tlet order = req.query.order || 'asc'\r\n\r\n\t\t\tlet where = {}\r\n\t\t\tlet fangjianleixing = req.query.fangjianleixing\r\n\t\t\tif (fangjianleixing) {\r\n\r\n\t\t\t\tif (fangjianleixing.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.fangjianleixing = {\r\n\t\t\t\t\t\t[Op.like]: fangjianleixing\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.fangjianleixing = {\r\n\t\t\t\t\t\t[Op.eq]: fangjianleixing\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet result = await FangjianleixingModel.findAndCountAll({\r\n\t\t\t\torder: [[sort, order]],\r\n\t\t\t\twhere,\r\n\t\t\t\toffset: (page - 1) * limit,\r\n\t\t\t\tlimit\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tresult.currPage = page\r\n\t\t\tresult.pageSize = limit\r\n\r\n\t\t\ttoRes.page(res, 0, result)\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 401, '您的权限不够！', '', 200)\r\n\t\t}\r\n\t})\r\n\r\n\r\n\t// 保存接口（后端）\r\n\tapi.post('/save', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tObject.keys(req.body).forEach(item=>{\r\n\t\t\t\tif(req.body[item] == '')  delete req.body[item]\r\n\t\t\t})\r\n\r\n\r\n\r\n\t\t\tconst userinfo = await FangjianleixingModel.create(req.body)\r\n\r\n\t\t\tif (userinfo === null) {\r\n\r\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 保存接口（前端）\r\n\tapi.post('/add', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tObject.keys(req.body).forEach(item=>{\r\n\t\t\t\tif(req.body[item] == '')  delete req.body[item]\r\n\t\t\t})\r\n\r\n\t\t\tif (jwt.decode(req.headers.token) == null) {\r\n\t\t\t\ttoRes.session(res, 401, '请登录后再操作', '', 401)\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tconst userinfo = await FangjianleixingModel.create(req.body)\r\n\r\n\t\t\tif (userinfo === null) {\r\n\r\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 更新接口\r\n\tapi.post('/update', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\r\n\r\n\t\t\tawait FangjianleixingModel.update(req.body, {\r\n\t\t\t\twhere: {\r\n\t\t\t\t  id: req.body.id || 0\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\ttoRes.session(res, 0, '编辑成功！')\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 删除接口\r\n\tapi.post('/delete', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tawait FangjianleixingModel.destroy({\r\n\t\t\t\twhere: {\r\n\t\t\t\t  id: {\r\n\t\t\t\t\t[Op.in]: req.body\r\n\t\t\t\t  }\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\ttoRes.session(res, 0, '删除成功！')\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 详情接口（后端）\r\n\tapi.all('/info/:id', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\r\n\t\t\ttoRes.record(res, 0, await FangjianleixingModel.findOne({ where: { id: req.params.id } }))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 详情接口（前端）\r\n\tapi.all('/detail/:id', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\r\n\t\t\ttoRes.record(res, 0, await FangjianleixingModel.findOne({ where: { id: req.params.id } }))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 获取需要提醒的记录数接口\r\n\tapi.get('/remind/:columnName/:type', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sql = 'SELECT 0 AS count'\r\n\t\t\t\r\n\t\t\tif (req.params.type == 1) {\r\n\t\t\t\tif (req.query.remindstart) sql = \"SELECT COUNT(*) AS count FROM fangjianleixing WHERE \" + req.params.columnName + \" >= '\" + req.query.remindstart + \"'\"\r\n\t\t\t\tif (req.query.remindend) sql = \"SELECT COUNT(*) AS count FROM fangjianleixing WHERE \" + req.params.columnName + \" <= '\" + req.query.remindend + \"'\"\r\n\r\n\t\t\t\tif (req.query.remindstart && req.query.remindend) {\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM fangjianleixing WHERE \" + req.params.columnName + \" >= '\" + req.query.remindstart + \"' AND \" + req.params.columnName + \" <= '\" + req.query.remindend + \"'\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (req.params.type == 2) {\r\n\t\t\t\tif (req.query.remindstart) {\r\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 + Number(req.query.remindstart), \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM fangjianleixing WHERE \" + req.params.columnName + \" >= '\" + remindStart + \"'\"\r\n\t\t\t\t}\r\n\t\t\t\tif (req.query.remindend) {\r\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM fangjianleixing WHERE \" + req.params.columnName + \" <= '\" + remindEnd + \"'\"\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (req.query.remindstart && req.query.remindend) {\r\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 + Number(req.query.remindstart), \"yyyy-MM-dd\")\r\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM fangjianleixing WHERE \" + req.params.columnName + \" >= '\" + remindStart + \"' AND \" + req.params.columnName + \" <= '\" + remindEnd + \"'\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst results = await sequelize.query(sql, {\r\n\t\t\t\tplain: true,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t})\r\n\r\n\t\t\ttoRes.count(res, 0, results.count)\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t// 分组统计接口\r\n\tapi.get('/group/:columnName', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet columnName = req.params.columnName\r\n\t\t\t// let tableName = \"fangjianleixing\"\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\tsql = \"SELECT COUNT(*) AS total, \" + columnName + \" FROM fangjianleixing \" + where + \" GROUP BY \" + columnName + \" LIMIT 10\" \r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 统计指定字段\r\n\tapi.get('/value/:xColumnName/:yColumnName', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet xColumnName = req.params.xColumnName\r\n\t\t\tlet yColumnName = req.params.yColumnName\r\n\t\t\t// let tableName = \"fangjianleixing\"\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\tif (\"fangjianleixing\" == \"orders\") {\r\n\t\t\t\twhere += \" AND status IN ('已支付', '已发货', '已完成') \";\r\n\t\t\t}\r\n\r\n\t\t\tsql = \"SELECT \" + xColumnName + \", SUM(\" + yColumnName + \") AS total FROM fangjianleixing \" + where + \" GROUP BY \" + xColumnName + \" DESC LIMIT 10\"\r\n\t\t\t\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 按日期统计\r\n\tapi.get('/value/:xColumnName/:yColumnName/:timeStatType', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet xColumnName = req.params.xColumnName\r\n\t\t\tlet yColumnName = req.params.yColumnName\r\n\t\t\tlet timeStatType = req.params.timeStatType\r\n\t\t\tlet tableName = \"fangjianleixing\"\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\tif (\"fangjianleixing\" == \"orders\") {\r\n\t\t\t\twhere += \" AND status IN ('已支付', '已发货', '已完成') \";\r\n\t\t\t}\r\n\r\n            if (config.dbConnection.dbtype.toLowerCase() == \"mysql\") {\r\n                if (timeStatType == \"日\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') LIMIT 10\";\r\n                if (timeStatType == \"月\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m')  LIMIT 10\";\r\n                if (timeStatType == \"年\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y')  LIMIT 10\";\r\n            } else {\r\n                if (timeStatType == \"日\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(10),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(10),\" + xColumnName + \", 120)  LIMIT 10\";\r\n                if (timeStatType == \"月\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(7),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(7),\" + xColumnName + \", 120)  LIMIT 10\";\r\n                if (timeStatType == \"年\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(4),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(4),\" + xColumnName + \", 120)  LIMIT 10\";\r\n            }\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\treturn api\r\n}\r\n"]}