{"version":3,"sources":["../../src/api/Users.js"],"names":["config","db","api","post","req","res","console","log","query","UsersModel","findOne","where","username","password","userinfo","toRes","session","token","jwt","sign","id","dataValues","role","jwtSecret","expiresIn","all","auth","destroy","create","body","record","get","page","parseInt","limit","sort","order","Op","like","findAndCountAll","offset","result","currPage","pageSize","update","in","params"],"mappings":"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","file":"Users.js","sourcesContent":["import { version } from '../../package.json'\nimport { Router } from 'express'\nimport { Op } from 'sequelize'\nimport toRes from '../lib/toRes'\nimport UsersModel from '../models/UsersModel'\nimport jwt from 'jsonwebtoken'\n\nexport default ({ config, db }) => {\n\tlet api = Router()\n\n\t// 用户登录接口\n\tapi.post('/login', async (req, res) => {\n\t\tconsole.log(req.query)\n\t\ttry {\n\n\t\t\tlet userinfo = await UsersModel.findOne({ where: { username: req.query.username, password: req.query.password } })\n\t\t\tif (userinfo === null) {\n\t\t\t\ttoRes.session(res, -1, '用户名或密码错误！')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst token = jwt.sign(\n\t\t\t\t{\n\t\t\t\t\tid: userinfo.dataValues.id,\n\t\t\t\t\tusername: userinfo.dataValues.username,\n\t\t\t\t\trole: userinfo.dataValues.role\n\t\t\t\t},\n\t\t\t\tconfig.jwtSecret,\n\t\t\t\t{\n\t\t\t\t\texpiresIn: 60 * 60 * 24 * 1\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tuserinfo.dataValues.token = token\n\t\t\tdelete userinfo.dataValues.password\n\t\t\treq.session.userinfo = userinfo\n\n\t\t\ttoRes.session(res, 0, '登录成功！', token)\n\t\t} catch(err) {\n\t\t\tconsole.log(err);\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 用户退出接口\n\tapi.all('/logout', (req, res) => {\n\n\t\tif (!toRes.auth(req, res, '管理员')) return\n\t\t\n\t\treq.session.destroy(err => {\n\t\t\ttoRes.session(res, 0, '退出成功！')\n\t\t})\n\t})\n\n\t// 注册接口\n\tapi.post('/register', async (req, res) => {\n\t\ttry {\n\n\t\t\tconst userinfo = await UsersModel.create(req.body)\n\n\t\t\tif (userinfo === null) {\n\n\t\t\t\ttoRes.session(res, -1, '注册失败！')\n\t\t\t} else {\n\n\t\t\t\ttoRes.session(res, 0, '注册成功！')\n\t\t\t}\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 获取session的接口\n\tapi.all('/session', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tif (!toRes.auth(req, res, '管理员')) return\n\t\t\t\n\t\t\ttoRes.record(res, 0, await UsersModel.findOne({ where: { id: req.session.userinfo.id } }))\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 分页接口（后端）\n\tapi.get('/page', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tif (!toRes.auth(req, res, '管理员')) return\n\n\t\t\tlet page = parseInt(req.query.page) || 1\n\t\t\tlet limit = parseInt(req.query.limit) || 10\n\t\t\tlet sort = req.query.sort || 'id'\n\t\t\tlet order = req.query.order || 'asc'\n\t\t\tlet username = req.query.username\n\n\t\t\tlet where = {}\n\n\t\t\tif (username) {\n\t\t\t\twhere.username = {\n\t\t\t\t\t[Op.like]: username\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet result = await UsersModel.findAndCountAll({\n\t\t\t\torder: [[sort, order]],\n\t\t\t\twhere,\n\t\t\t\toffset: (page - 1) * limit,\n\t\t\t\tlimit\n\t\t\t})\n\t\t\t\n\t\t\tresult.currPage = page\n\t\t\tresult.pageSize = limit\n\n\t\t\ttoRes.page(res, 0, result)\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 保存接口\n\tapi.post('/save', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tif (!toRes.auth(req, res, '管理员')) return\n\n\t\t\tconst userinfo = await UsersModel.create(req.body)\n\n\t\t\tif (userinfo === null) {\n\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\n\t\t\t} else {\n\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\n\t\t\t}\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 更新接口\n\tapi.post('/update', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tif (!toRes.auth(req, res, '管理员')) return\n\n\t\t\tawait UsersModel.update(req.body, {\n\t\t\t\twhere: {\n\t\t\t\t  id: req.body.id\n\t\t\t\t}\n\t\t\t})\n\n\t\t\ttoRes.session(res, 0, '编辑成功！')\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 删除接口\n\tapi.post('/delete', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tif (!toRes.auth(req, res, '管理员')) return\n\n\t\t\tawait UsersModel.destroy({\n\t\t\t\twhere: {\n\t\t\t\t  id: {\n\t\t\t\t\t[Op.in]: req.body\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t})\n\n\t\t\ttoRes.session(res, 0, '删除成功！')\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 详情接口\n\tapi.get('/info/:id', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tif (!toRes.auth(req, res, '管理员')) return\n\n\t\t\ttoRes.record(res, 0, await UsersModel.findOne({ where: { id: req.params.id } }))\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\treturn api\n}\n"]}