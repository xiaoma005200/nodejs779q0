{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","secret","sessionSecret","resave","saveUninitialized","projectName","express","static","path","join","__dirname","jwtSecret","algorithms","credentialsRequired","getToken","req","util","isNothing","headers","token","requestProperty","unless","url","methods","err","res","next","name","status","code","msg","db","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;;AAEA;AACAA,IAAII,GAAJ,CAAQ,oBAAK;AACZC,iBAAgBC,iBAAOC;AADX,CAAL,CAAR;;AAIA;AACAP,IAAII,GAAJ,CAAQI,qBAAWC,IAAX,CAAgB;AACvBC,QAAOJ,iBAAOK;AADS,CAAhB,CAAR;;AAIA;AACAX,IAAII,GAAJ,CAAQ,8BAAe;AACtBQ,SAAQN,iBAAOO,aADO;AAEtBC,SAAQ,KAFc;AAGtBC,oBAAmB;AAHG,CAAf,CAAR;;AAMA;AACAf,IAAII,GAAJ,CAAQ,MAAME,iBAAOU,WAArB,EAAkCC,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAf,CAAlC;;AAEA;AACArB,IAAII,GAAJ,CAAQ,0BAAW;AAClBQ,SAAQN,iBAAOgB,SADG,EACU;AAC5BC,aAAY,CAAC,OAAD,CAFM,EAEU;AAC5BC,sBAAqB,IAHH,EAGU;AAC5BC,SAJkB,oBAIRC,GAJQ,EAIH;AAAa;;AAE3B,SAAOC,eAAKC,SAAL,CAAeF,IAAIG,OAAJ,CAAYC,KAA3B,IAAoC,IAApC,GAA2CJ,IAAIG,OAAJ,CAAYC,KAA9D;AACA,EAPiB;;AAQlBC,kBAAiB;AARC,CAAX,EASLC,MATK,CASE;AACTb,OAAM,CACL;AACCc,OAAK,wGADN;AAECC,WAAS,CAAC,KAAD,EAAQ,MAAR;AAFV,EADK,EAKL;AACCD,OAAK,sGADN;AAECC,WAAS,CAAC,KAAD,EAAQ,MAAR;AAFV,EALK;AADG,CATF,CAAR;;AAsBA;AACAlC,IAAII,GAAJ,CAAQ,UAAC+B,GAAD,EAAMT,GAAN,EAAWU,GAAX,EAAgBC,IAAhB,EAAyB;;AAEhC,KAAIF,IAAIG,IAAJ,KAAa,mBAAjB,EAAsC;AACrCF,MAAIG,MAAJ,CAAW,GAAX,EAAgB9B,IAAhB,CAAqB;AACpB+B,SAAM,GADc;AAEpBC,QAAK;AAFe,GAArB;AAIA;AACD,CARD;;AAWA;AACA,kBAAa,cAAM;;AAElBzC,KAAII,GAAJ,CAAQ,0BAAW,EAAEE,wBAAF,EAAUoC,MAAV,EAAX,CAAR;;AAEA1C,KAAII,GAAJ,CAAQ,MAAME,iBAAOU,WAArB,EAAkC,mBAAI,EAAEV,wBAAF,EAAUoC,MAAV,EAAJ,CAAlC;;AAEA1C,KAAIC,MAAJ,CAAW0C,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBxC,iBAAOyC,IAA7C,EAAmD,YAAM;AACxDC,UAAQC,GAAR,sBAA+BjD,IAAIC,MAAJ,CAAWiD,OAAX,GAAqBH,IAApD;AACA,EAFD;AAGA,CATD;;kBAWe/C,G","file":"index.js","sourcesContent":["import http from 'http'\nimport path from 'path'\nimport express from 'express'\nimport cors from 'cors'\nimport morgan from 'morgan'\nimport bodyParser from 'body-parser'\nimport expressSession from 'express-session'\nimport expressJWT from 'express-jwt'\nimport initializeDb from './db'\nimport middleware from './middleware'\nimport api from './api'\nimport config from './config.json'\nimport util from './lib/util'\n\nlet app = express()\napp.server = http.createServer(app)\n\n// app.use(morgan('dev'))\n\n//模块解决跨域问题\napp.use(cors({\n\texposedHeaders: config.corsHeaders\n}))\n\n//Post请求中间件，bodyParser.json将前端发来的json对象解析\napp.use(bodyParser.json({\n\tlimit: config.bodyLimit\n}))\n\n//引用模块expressSession\napp.use(expressSession({\n\tsecret: config.sessionSecret,\n\tresave: false,\n\tsaveUninitialized: true\n}))\n\n//express路由的配置\napp.use('/' + config.projectName, express.static(path.join(__dirname, 'views')))\n\n//使用jsonwebToken模块,浏览器通过记录token的值辨别用户身份login|register|upload|download|resetPass|autoSort|list|sendemail|notify|update|security|sendsms\napp.use(expressJWT({\n\tsecret: config.jwtSecret,   //必选参数，string类型或函数\n\talgorithms: [\"HS256\"],      //加密方式HS256\n\tcredentialsRequired: true,  //当为false时，如果请求不包含令牌，则继续到下一个中间件，而不是失败\n\tgetToken (req) {            //getToken获取登录时浏览器保存的Token\n\n\t\treturn util.isNothing(req.headers.token) ? null : req.headers.token\n\t},\n\trequestProperty: 'xiezn'\n}).unless({\n\tpath: [\n\t\t{\n\t\t\turl: /.*\\/(login|register|upload|download|resetPass|autoSort|list|sendemail|notify|update|security|sendsms)$/,\n\t\t\tmethods: ['GET', 'POST']\n\t\t},\n\t\t{\n\t\t\turl: /.*\\/(config|option|follow|sh|remind|cal|group|value|news|info|detail|forum|updateBrowseDuration)\\/.*/,\n\t\t\tmethods: ['GET', 'POST']\n\t\t}\n\t]\n}))\n\n//直接访问http://localhost:8080/\napp.use((err, req, res, next) => {\n\n\tif (err.name === 'UnauthorizedError') {\n\t\tres.status(200).json({\n\t\t\tcode: 401,\n\t\t\tmsg: '您的权限不够！'\n\t\t})\n\t}\n})\n\n\n//设置服务信息，监听端口等\ninitializeDb(db => {\n\n\tapp.use(middleware({ config, db }))\n\n\tapp.use('/' + config.projectName, api({ config, db }))\n\n\tapp.server.listen(process.env.PORT || config.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`)\n\t})\n})\n\nexport default app\n"]}